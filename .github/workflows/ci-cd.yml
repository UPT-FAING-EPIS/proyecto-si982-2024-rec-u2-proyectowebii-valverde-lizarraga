name: Construcción y Despliegue en Azure

env:
  AZURE_WEBAPP_NAME: app-proyecto-valverde-lizarraga
  DOTNET_VERSION: '8'
  IMAGE_NAME: ghcr.io/jeanvalverde24/shorten

on:
  push:
    branches: [ "main" ]
    paths:
      - 'GestionReservasWebII/**'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Escaneo de Seguridad con Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './GestionReservasWebII'
          severity: 'HIGH,CRITICAL'

  build:
    runs-on: ubuntu-latest
    needs: scan
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Login en GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Construir y publicar imagen Docker desde GestionReservasWebII
        run: |
          docker build -f GestionReservasWebII/Dockerfile . --tag ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Login en Azure con Usuario y Contraseña
        run: |
          az login -u ${{ secrets.AZURE_USERNAME }} -p ${{ secrets.AZURE_PASSWORD }}
          
          # Obtener las suscripciones disponibles
          az account list --output table
          
          # Obtener el segundo ID de suscripción
          SECOND_SUBSCRIPTION_ID=$(az account list --query "[1].id" -o tsv)
          
          # Configurar la segunda suscripción como activa
          az account set --subscription $SECOND_SUBSCRIPTION_ID
          
          # Verificar la suscripción actual
          az account show

      - name: Verificar si el App Service existe antes de desplegar
        run: |
          az webapp show --resource-group arg-proyecto-valverde-lizarraga --name app-proyecto-valverde-lizarraga || exit 1

      - name: Desplegar a Azure Web App con Docker
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.IMAGE_NAME }}:${{ github.sha }}

  generate-diagram:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Instalar herramientas necesarias
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz jq

      - name: Generar Diagrama de Despliegue en PNG
        run: |
          # Exportar recursos del grupo en formato JSON
          az group export -n arg-proyecto-valverde-lizarraga --output json > diagrama_de_despliegue.json || echo "❌ Advertencia: Algunos recursos no se exportaron."

          # Generar el diagrama en formato DOT
          az graph query -q "Resources | where resourceGroup == 'arg-proyecto-valverde-lizarraga'" --output graph > deployment.dot || exit 1
          
          # Convertir el diagrama DOT a PNG
          dot -Tpng deployment.dot -o deployment.png

      - name: Subir diagrama de despliegue como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: diagrama_de_despliegue
          path: deployment.png

      - name: Publicar Diagrama en Summary
        run: |
          echo "## 📌 Diagrama de Despliegue" >> $GITHUB_STEP_SUMMARY
          echo "![Diagrama de Despliegue](deployment.png)" >> $GITHUB_STEP_SUMMARY

name: Construcción y Despliegue en Azure

env:
  AZURE_WEBAPP_NAME: proyecto-awa-326  # Nombre de la aplicación
  DOTNET_VERSION: '8'  # Versión de .NET
  IMAGE_NAME: ghcr.io/jeanvalverde24/shorten

on:
  push:
    branches: [ "main" ]
    paths:
      - 'GestionReservasWebII/**'  # Se detectan cambios en la carpeta del código fuente
      - 'infra/**'  # Se detectan cambios en la infraestructura Terraform
      - '.github/workflows/**'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Escaneo de Terraform con Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './infra'
          severity: 'HIGH,CRITICAL'

  build:
    runs-on: ubuntu-latest
    needs: scan  # Asegura que el escaneo se ejecute antes de compilar
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Login en GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Construir y publicar imagen Docker desde GestionReservasWebII
        run: |
          docker build -f GestionReservasWebII/Dockerfile . --tag ghcr.io/jeanvalverde24/shorten:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy_infra:
    runs-on: ubuntu-latest
    needs: build  # Se asegura que la imagen Docker se haya publicado antes
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Login en Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Crear terraform.tfvars
        run: |
          cd infra
          echo "suscription_id=\"${{ secrets.SUBSCRIPTION_ID }}\"" > terraform.tfvars
          echo "sqladmin_username=\"${{ secrets.SQL_USER }}\"" >> terraform.tfvars
          echo "sqladmin_password=\"${{ secrets.SQL_PASS }}\"" >> terraform.tfvars

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Inicializar Terraform
        run: cd infra && terraform init 

      - name: Validar configuración Terraform
        run: cd infra && terraform validate -no-color

      - name: Plan de Infraestructura Terraform
        run: cd infra && terraform plan -var-file=terraform.tfvars -no-color -out main.tfplan -input=false

      - name: Aplicar Infraestructura Terraform
        run: |
          cd infra
          terraform apply -auto-approve main.tfplan

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: deploy_infra  # Se asegura que la infraestructura esté lista antes de desplegar
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Login en Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Desplegar a Azure Web App con Docker
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.IMAGE_NAME }}:${{ github.sha }}
